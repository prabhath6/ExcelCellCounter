@page "/"
@using System.Text.RegularExpressions
@inject IJSRuntime JS
@rendermode InteractiveServer

<section id="input-controls">
    <div class="grid">
    <nav>
        <button class="outline" @onclick="DisplaySingleRangeView">Single Range</button>
        <button class="outline" @onclick="DisplayMultipleRangesView">Multiple Ranges</button>
    </nav>
    </div>
</section>

<section id="output">
      <div class="container">
        @if (@showSingleRangeView)
        {
            <div id="singleRangeView" class="view">
                <div class="single-range">
                    <label for="singleRange">Enter a single range:</label>
                    <input name="singleRange" type="text" id="singleRange" placeholder="A1:B2" @bind="SingleRange">
                    <button @onclick="CalculateSingleRange">Calculate</button>
                </div>
            </div>
        }
        else
        {
            <div id="multipleRangesView" class="view">
                <div class="multiple-ranges">
                    <label for="multipleRanges">Enter multiple ranges (one per line):</label>
                    <textarea id="multipleRanges" rows="6"
                    @bind="MultipleRanges"
                    placeholder="A2:XEZ7838
B5:C10
D2:D50"></textarea>
                    <button @onclick="CalculateMultipleRanges">Calculate</button>
                </div>
            </div>
        }

        <section id="error-section">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }
        </section>

        <section id="tables">
            <h2>Results:</h2>
            <div class="overflow-auto">
                <table class="striped">
                    <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Range</th>
                        <th scope="col">Rows</th>
                        <th scope="col">Columns</th>
                        <th scope="col">Total Cells</th>
                    </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < tableData.Length; i++)
                        {
                            <tr>
                                <th scope="row">@(i + 1)</th>
                                <td>@tableData[i].Range</td>
                                <td>@tableData[i].Rows</td>
                                <td>@tableData[i].Columns</td>
                                <td>@tableData[i].TotalCells</td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (tableData.Length > 0 )
                {
                    <h3>Export to Excel</h3>
                    <button @onclick="@(() => ExportToExcel(@tableData))">Export to Excel</button>
                }
            </div>
        </section>
    </div>
</section>

@code {
    private bool showSingleRangeView = true;
    private string SingleRange = "";
    private string MultipleRanges = "";
    private string errorMessage = "";
    private TableData[] tableData = [];

    private void DisplaySingleRangeView()
    {
        showSingleRangeView = true;
        SingleRange = "";
        errorMessage = "";
        tableData = [];
    }

    private void DisplayMultipleRangesView()
    {
        showSingleRangeView = false;
        errorMessage = "";
        MultipleRanges = "";
        tableData = [];
    }

    private void CalculateSingleRange()
    {
        TableData? result = CalculateCells(SingleRange.Trim());
        if (result == null)
        {
            errorMessage = "Invalid range provided.";
            tableData = Array.Empty<TableData>();
        }
        else
        {
            errorMessage = "";
            tableData = new TableData[] { result };
        }
    }

    private void CalculateMultipleRanges()
    {
        string[]? inputRanges = MultipleRanges.Trim().Split("\n");
        CalculateMultipleRanges(inputRanges);
    }

    private void CalculateMultipleRanges(string[]? inputRanges)
    {
        if (inputRanges != null)
        {
            var results = inputRanges.Select(x => this.CalculateCells(x.Trim())).ToArray();
            if (results.Any(r => r == null))
            {
                errorMessage = "One or more invalid ranges provided.";
                tableData = Array.Empty<TableData>();
            }
            else
            {
                errorMessage = "";
                tableData = results!;
            }
        }
    }

    private int ColumnToNumber(string column)
    {
        int number = 0;
        foreach (char c in column)
        {
            number = number * 26 + (c - 'A' + 1);
        }
        return number;
    }

    private TableData? CalculateCells(string range)
    {
        string rangePattern = @"^([A-Z]+)(\d+):([A-Z]+)(\d+)$";
        var matchedRanges = Regex.Match(range, rangePattern);

        if (!matchedRanges.Success) {
            tableData = [];
            return null;
        }

        string startCol = matchedRanges.Groups[1].Value;
        int startRow = Convert.ToInt32(matchedRanges.Groups[2].Value);
        string endCol = matchedRanges.Groups[3].Value;
        int endRow = Convert.ToInt32(matchedRanges.Groups[4].Value);

        int startColNumber = ColumnToNumber(startCol);
        int endColNumber = ColumnToNumber(endCol);

        int numRows = endRow - startRow + 1;
        int numCols = endColNumber - startColNumber + 1;

        return new TableData { Rows = numRows, Columns = numCols, TotalCells = numCols * numRows, Range = range };
    }

    private async Task ExportToExcel(TableData[] data)
    {
        await JS.InvokeVoidAsync("exportToExcel", data.ToList()).ConfigureAwait(false);
    }

    private class TableData
    {
        public int Rows { get; set; }
        public int Columns { get; set; }
        public int TotalCells { get; set; }
        public string Range { get; set; } = string.Empty;
    }
}